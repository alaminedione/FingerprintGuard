/**
 * Gestionnaire centralis√© des param√®tres pour FingerprintGuard v3.0.0
 * G√®re le chargement, la validation, la migration et la sauvegarde des param√®tres
 */

import { DEFAULT_SETTINGS, VALIDATION_RULES } from '../config/defaults.js';

export class SettingsManager {
  constructor() {
    this.settings = { ...DEFAULT_SETTINGS };
    this.listeners = new Set();
  }

  /**
   * Initialise le gestionnaire de param√®tres
   * @returns {Promise<object>} Les param√®tres charg√©s
   */
  async initialize() {
    try {
      console.log('üîß Initializing SettingsManager...');
      let stored = await chrome.storage.sync.get(null); // Charger tous les param√®tres

      this.settings = { ...DEFAULT_SETTINGS, ...stored };
      this.settings = this.validateSettings(this.settings);
      console.log('‚úÖ SettingsManager initialized with settings:', this.settings);
      return this.settings;
    } catch (error) {
      console.error('‚ùå Error initializing SettingsManager:', error);
      this.settings = { ...DEFAULT_SETTINGS };
      return this.settings;
    }
  }

  

  

  /**
   * Obtient une valeur de param√®tre
   * @param {string} key - Cl√© du param√®tre (peut √™tre imbriqu√©e, ex: 'profile.platform')
   * @returns {*} Valeur du param√®tre
   */
  get(key) {
    if (key.includes('.')) {
      return key.split('.').reduce((o, i) => o[i], this.settings);
    }
    return this.settings[key];
  }

  /**
   * Obtient tous les param√®tres
   * @returns {object} Tous les param√®tres
   */
  getAll() {
    return { ...this.settings };
  }

  /**
   * Met √† jour un param√®tre
   * @param {string} key - Cl√© du param√®tre (peut √™tre imbriqu√©e)
   * @param {*} value - Nouvelle valeur
   * @returns {Promise<boolean>} Succ√®s de la mise √† jour
   */
  async set(key, value) {
    try {
      let settingsToUpdate = this.settings;
      const keys = key.split('.');
      const lastKey = keys.pop();
      
      for (const k of keys) {
        settingsToUpdate = settingsToUpdate[k];
      }
      
      settingsToUpdate[lastKey] = value;

      // Pour la sauvegarde, nous devons reconstruire l'objet √† partir de la cl√© compl√®te
      const updateObject = {};
      if (keys.length > 0) {
        // Recr√©e l'objet imbriqu√© pour la sauvegarde
        const topLevelKey = keys[0];
        updateObject[topLevelKey] = this.settings[topLevelKey];
        await chrome.storage.sync.set({ [topLevelKey]: this.settings[topLevelKey] });
      } else {
        updateObject[key] = value;
        await chrome.storage.sync.set({ [key]: value });
      }

      this.notifyListeners(key, value);
      console.log(`‚úÖ Setting updated: ${key} = ${value}`);
      return true;
    } catch (error) {
      console.error(`‚ùå Error updating setting ${key}:`, error);
      return false;
    }
  }

  /**
   * Met √† jour plusieurs param√®tres
   * @param {object} updates - Objet contenant les param√®tres √† mettre √† jour
   * @returns {Promise<string[]>} Liste des cl√©s mises √† jour avec succ√®s
   */
  async setMultiple(updates) {
    if (!updates || typeof updates !== 'object') {
      console.error('‚ùå Invalid updates object');
      return [];
    }

    const updatedKeys = [];

    Object.keys(updates).forEach(key => {
        this.set(key, updates[key]); // Utilise la nouvelle logique `set` pour g√©rer les cl√©s imbriqu√©es
        updatedKeys.push(key);
    });

    // La sauvegarde est d√©j√† g√©r√©e dans `set`, donc pas besoin de `chrome.storage.sync.set` ici

    console.log('‚úÖ Multiple settings updated:', updatedKeys);
    return updatedKeys;
  }

  /**
   * R√©initialise tous les param√®tres aux valeurs par d√©faut
   * @returns {Promise<boolean>} Succ√®s de la r√©initialisation
   */
  async reset() {
    try {
      this.settings = { ...DEFAULT_SETTINGS };
      await chrome.storage.sync.clear();
      await chrome.storage.sync.set(this.settings);
      this.notifyListeners('*', this.settings);
      console.log('‚úÖ Settings reset to defaults');
      return true;
    } catch (error) {
      console.error('‚ùå Error resetting settings:', error);
      return false;
    }
  }

  /**
   * Valide les param√®tres charg√©s
   * @param {object} settings - Param√®tres √† valider
   * @returns {object} Param√®tres valid√©s
   */
  validateSettings(settings) {
    if (!settings || typeof settings !== 'object') {
      console.error('‚ùå Invalid settings object, using defaults');
      return { ...DEFAULT_SETTINGS };
    }

    const validated = { ...settings };

    // Valider les champs en utilisant les r√®gles de VALIDATION_RULES
    Object.keys(VALIDATION_RULES).forEach(type => {
        VALIDATION_RULES[type].forEach(field => {
            const value = this.get(field); // Utilise `get` pour les cl√©s imbriqu√©es
            const defaultValue = this.get(field, DEFAULT_SETTINGS);

            let isValid = false;
            switch (type) {
                case 'booleanFields':
                    isValid = typeof value === 'boolean';
                    break;
                case 'numberFields':
                    isValid = typeof value === 'number' && !isNaN(value) && value >= 0;
                    break;
                case 'stringFields':
                    isValid = typeof value === 'string';
                    break;
            }

            if (!isValid) {
                console.warn(`‚ö†Ô∏è Invalid field ${field}, resetting to default`);
                this.set(field, defaultValue); // Utilise `set` pour les cl√©s imbriqu√©es
            }
        });
    });

    // Validation sp√©ciale pour la r√©solution d'√©cran
    const screenResolution = this.get('profile.spoofScreenResolution');
    if (screenResolution && screenResolution !== 'random') {
      const resolutionValidation = this.validateScreenResolution(screenResolution);
      if (!resolutionValidation.valid) {
        console.warn(`‚ö†Ô∏è R√©solution d'√©cran invalide '${screenResolution}'. ${resolutionValidation.reason}`);
        this.set('profile.spoofScreenResolution', DEFAULT_SETTINGS.profile.spoofScreenResolution);
      }
    }

    return validated;
  }

  /**
   * Valide une r√©solution d'√©cran
   * @param {string} resolution - R√©solution √† valider (format: "1920x1080")
   * @returns {object} R√©sultat de validation
   */
  validateScreenResolution(resolution) {
    if (typeof resolution !== 'string') {
      return { valid: false, reason: 'La r√©solution doit √™tre une cha√Æne de caract√®res' };
    }

    if (resolution === 'random') {
      return { valid: true };
    }

    const resolutionPattern = /^\d{3,4}x\d{3,4}$/;
    if (!resolutionPattern.test(resolution)) {
      return { valid: false, reason: 'Format invalide. Utilisez le format "1920x1080"' };
    }

    const [width, height] = resolution.split('x').map(Number);
    
    if (width < 800 || height < 600) {
      return { valid: false, reason: 'R√©solution trop petite (minimum 800x600)' };
    }

    if (width > 7680 || height > 4320) {
      return { valid: false, reason: 'R√©solution trop grande (maximum 7680x4320)' };
    }

    return { valid: true };
  }

  /**
   * Ajoute un listener pour les changements de param√®tres
   * @param {Function} callback - Fonction appel√©e lors des changements
   */
  addListener(callback) {
    this.listeners.add(callback);
  }

  /**
   * Supprime un listener
   * @param {Function} callback - Fonction √† supprimer
   */
  removeListener(callback) {
    this.listeners.delete(callback);
  }

  /**
   * Notifie tous les listeners d'un changement
   * @param {string} key - Cl√© du param√®tre modifi√©
   * @param {*} value - Nouvelle valeur
   */
  notifyListeners(key, value) {
    this.listeners.forEach(callback => {
      try {
        callback(key, value, this.settings);
      } catch (error) {
        console.error('‚ùå Error in settings listener:', error);
      }
    });
  }

  /**
   * Exporte les param√®tres actuels
   * @returns {object} Param√®tres export√©s avec m√©tadonn√©es
   */
  export() {
    return {
      settings: this.settings,
      exportedAt: new Date().toISOString(),
      version: '3.0.0', // Mise √† jour de la version
      type: 'fingerprintguard-settings'
    };
  }

  /**
   * Importe des param√®tres depuis un objet export√©
   * @param {object} data - Donn√©es √† importer
   * @returns {Promise<boolean>} Succ√®s de l'importation
   */
  async import(data) {
    try {
      if (!data || !data.settings || data.type !== 'fingerprintguard-settings') {
        throw new Error('Invalid export data format');
      }

      const validatedSettings = this.validateSettings(data.settings);
      await this.setMultiple(validatedSettings);
      console.log('‚úÖ Settings imported successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Error importing settings:', error);
      return false;
    }
  }
}