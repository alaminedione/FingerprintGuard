/**
 * Gestionnaire centralis√© des param√®tres pour FingerprintGuard v2.1.0
 * G√®re le chargement, la validation et la sauvegarde des param√®tres
 */

import { DEFAULT_SETTINGS, VALIDATION_RULES } from '../config/defaults.js';

export class SettingsManager {
  constructor() {
    this.settings = { ...DEFAULT_SETTINGS };
    this.listeners = new Set();
  }

  /**
   * Initialise le gestionnaire de param√®tres
   * @returns {Promise<object>} Les param√®tres charg√©s
   */
  async initialize() {
    try {
      console.log('üîß Initializing SettingsManager...');
      const stored = await chrome.storage.sync.get(Object.keys(DEFAULT_SETTINGS));
      this.settings = { ...DEFAULT_SETTINGS, ...stored };
      this.settings = this.validateSettings(this.settings);
      console.log('‚úÖ SettingsManager initialized with settings:', this.settings);
      return this.settings;
    } catch (error) {
      console.error('‚ùå Error initializing SettingsManager:', error);
      this.settings = { ...DEFAULT_SETTINGS };
      return this.settings;
    }
  }

  /**
   * Obtient une valeur de param√®tre
   * @param {string} key - Cl√© du param√®tre
   * @returns {*} Valeur du param√®tre
   */
  get(key) {
    return this.settings[key];
  }

  /**
   * Obtient tous les param√®tres
   * @returns {object} Tous les param√®tres
   */
  getAll() {
    return { ...this.settings };
  }

  /**
   * Met √† jour un param√®tre
   * @param {string} key - Cl√© du param√®tre
   * @param {*} value - Nouvelle valeur
   * @returns {Promise<boolean>} Succ√®s de la mise √† jour
   */
  async set(key, value) {
    if (!Object.prototype.hasOwnProperty.call(DEFAULT_SETTINGS, key)) {
      console.warn(`‚ö†Ô∏è Unknown setting: ${key}`);
      return false;
    }

    try {
      this.settings[key] = value;
      await chrome.storage.sync.set({ [key]: value });
      this.notifyListeners(key, value);
      console.log(`‚úÖ Setting updated: ${key} = ${value}`);
      return true;
    } catch (error) {
      console.error(`‚ùå Error updating setting ${key}:`, error);
      return false;
    }
  }

  /**
   * Met √† jour plusieurs param√®tres
   * @param {object} updates - Objet contenant les param√®tres √† mettre √† jour
   * @returns {Promise<string[]>} Liste des cl√©s mises √† jour avec succ√®s
   */
  async setMultiple(updates) {
    if (!updates || typeof updates !== 'object') {
      console.error('‚ùå Invalid updates object');
      return [];
    }

    const validUpdates = {};
    const updatedKeys = [];

    // Valider tous les param√®tres avant de les appliquer
    Object.keys(updates).forEach(key => {
      if (Object.prototype.hasOwnProperty.call(DEFAULT_SETTINGS, key)) {
        validUpdates[key] = updates[key];
        this.settings[key] = updates[key];
        updatedKeys.push(key);
      } else {
        console.warn(`‚ö†Ô∏è Ignoring unknown setting: ${key}`);
      }
    });

    try {
      if (Object.keys(validUpdates).length > 0) {
        await chrome.storage.sync.set(validUpdates);
        updatedKeys.forEach(key => {
          this.notifyListeners(key, validUpdates[key]);
        });
        console.log('‚úÖ Multiple settings updated:', updatedKeys);
      }
      return updatedKeys;
    } catch (error) {
      console.error('‚ùå Error updating multiple settings:', error);
      return [];
    }
  }

  /**
   * R√©initialise tous les param√®tres aux valeurs par d√©faut
   * @returns {Promise<boolean>} Succ√®s de la r√©initialisation
   */
  async reset() {
    try {
      this.settings = { ...DEFAULT_SETTINGS };
      await chrome.storage.sync.clear();
      await chrome.storage.sync.set(this.settings);
      this.notifyListeners('*', this.settings);
      console.log('‚úÖ Settings reset to defaults');
      return true;
    } catch (error) {
      console.error('‚ùå Error resetting settings:', error);
      return false;
    }
  }

  /**
   * Valide les param√®tres charg√©s
   * @param {object} settings - Param√®tres √† valider
   * @returns {object} Param√®tres valid√©s
   */
  validateSettings(settings) {
    if (!settings || typeof settings !== 'object') {
      console.error('‚ùå Invalid settings object, using defaults');
      return { ...DEFAULT_SETTINGS };
    }

    const validated = { ...settings };

    // Valider les types bool√©ens
    VALIDATION_RULES.booleanFields.forEach(field => {
      if (validated[field] !== undefined && typeof validated[field] !== 'boolean') {
        console.warn(`‚ö†Ô∏è Invalid boolean field ${field}, resetting to default`);
        validated[field] = DEFAULT_SETTINGS[field];
      }
    });

    // Valider les nombres non-n√©gatifs
    VALIDATION_RULES.numberFields.forEach(field => {
      if (validated[field] !== undefined) {
        const value = Number(validated[field]);
        if (isNaN(value) || value < 0) {
          console.warn(`‚ö†Ô∏è Invalid number field ${field}, resetting to default`);
          validated[field] = DEFAULT_SETTINGS[field];
        } else {
          validated[field] = value;
        }
      }
    });

    // Valider les cha√Ænes de caract√®res
    VALIDATION_RULES.stringFields.forEach(field => {
      if (validated[field] !== undefined && typeof validated[field] !== 'string') {
        console.warn(`‚ö†Ô∏è Invalid string field ${field}, resetting to default`);
        validated[field] = DEFAULT_SETTINGS[field];
      }
    });

    return validated;
  }

  /**
   * Ajoute un listener pour les changements de param√®tres
   * @param {Function} callback - Fonction appel√©e lors des changements
   */
  addListener(callback) {
    this.listeners.add(callback);
  }

  /**
   * Supprime un listener
   * @param {Function} callback - Fonction √† supprimer
   */
  removeListener(callback) {
    this.listeners.delete(callback);
  }

  /**
   * Notifie tous les listeners d'un changement
   * @param {string} key - Cl√© du param√®tre modifi√©
   * @param {*} value - Nouvelle valeur
   */
  notifyListeners(key, value) {
    this.listeners.forEach(callback => {
      try {
        callback(key, value, this.settings);
      } catch (error) {
        console.error('‚ùå Error in settings listener:', error);
      }
    });
  }

  /**
   * Exporte les param√®tres actuels
   * @returns {object} Param√®tres export√©s avec m√©tadonn√©es
   */
  export() {
    return {
      settings: this.settings,
      exportedAt: new Date().toISOString(),
      version: '2.1.0',
      type: 'fingerprintguard-settings'
    };
  }

  /**
   * Importe des param√®tres depuis un objet export√©
   * @param {object} data - Donn√©es √† importer
   * @returns {Promise<boolean>} Succ√®s de l'importation
   */
  async import(data) {
    try {
      if (!data || !data.settings || data.type !== 'fingerprintguard-settings') {
        throw new Error('Invalid export data format');
      }

      const validatedSettings = this.validateSettings(data.settings);
      await this.setMultiple(validatedSettings);
      console.log('‚úÖ Settings imported successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Error importing settings:', error);
      return false;
    }
  }
}